🏗️ АРХИТЕКТУРА СИСТЕМЫ ДЛЯ 50 МАШИН НА WINDOWS
================================================

📋 ОБЩАЯ КОНЦЕПЦИЯ
------------------

У вас есть:
  1. ОДИН сервер (195.133.17.131) - собирает данные от всех машин
  2. 50 машин Windows - каждая записывает экран и отправляет на сервер
  3. Веб-интерфейс на сервере - показывает все машины

📡 КАК ЭТО РАБОТАЕТ
------------------

┌─────────────────┐
│  Windows PC #1  │──────┐
│  Иван_Desktop   │      │
└─────────────────┘      │
                         │
┌─────────────────┐      │      ┌──────────────────┐
│  Windows PC #2  │──────┼──────│                  │
│  Мария_Laptop   │      │      │   СЕРВЕР         │
└─────────────────┘      │      │   195.133.17.131 │
                         │      │                  │
┌─────────────────┐      │      │  temp_recordings/│
│  Windows PC #3  │──────┼──────│    ├─ Иван_Desktop/│
│  Петр_Office    │      │      │    ├─ Мария_Laptop/│
└─────────────────┘      │      │    ├─ Петр_Office/  │
                         │      │    └─ ...           │
      ...                │      │                     │
                         │      │  Веб: http://...     │
┌─────────────────┐      │      │  :6789               │
│  Windows PC #50 │──────┘      │  /live/Иван_Desktop │
│  Сергей_Home    │             └──────────────────┘
└─────────────────┘

🔧 ЧТО УЖЕ РАБОТАЕТ (НА СЕРВЕРЕ)
--------------------------------

✅ server_simple.py уже поддерживает:
   - Прием данных от множества машин (machine_id)
   - Автоматическое создание папок: temp_recordings/Иван_Desktop/
   - Live стримы для каждой машины: /live/Иван_Desktop
   - Хранение видео по отдельным папкам
   - Веб-интерфейс со списком всех машин

🔨 ЧТО НУЖНО СДЕЛАТЬ ДЛЯ WINDOWS
---------------------------------

1. АДАПТИРОВАТЬ КЛИЕНТ ДЛЯ WINDOWS
   ─────────────────────────────────
   
   Проблема: client_live.py использует PIL.ImageGrab, который плохо работает на Windows
   
   Решение: Использовать библиотеку mss (лучше для Windows) или Windows API
   
   Нужно создать: client_live_windows.py
   
   Отличия:
   - Захват экрана через mss вместо ImageGrab
   - Запуск как Windows Service (опционально)
   - Автозагрузка через реестр/папку автозагрузки

2. НАСТРОЙКА КАЖДОЙ МАШИНЫ
   ────────────────────────
   
   Для каждой из 50 машин нужен уникальный machine_id:
   
   Вариант A: Через config.txt (проще)
   ┌─────────────────────────────┐
   │ config.txt на каждой машине: │
   ├─────────────────────────────┤
   │ MACHINE_ID=Иван_Desktop     │
   │ SERVER_HOST=195.133.17.131  │
   │ SERVER_PORT=6789            │
   └─────────────────────────────┘
   
   Вариант B: Через переменные окружения Windows
   - Создать .bat файл для запуска
   
   Вариант C: Автоматически из имени компьютера Windows
   - client_live.py уже умеет брать из hostname + username

3. РАЗВЕРТЫВАНИЕ НА 50 МАШИНАХ
   ────────────────────────────
   
   Способ 1: Вручную (для первых тестов)
   ├─ Скопировать client_live_windows.py на каждую машину
   ├─ Установить Python 3.11+
   ├─ Установить зависимости: pip install -r requirements_windows.txt
   └─ Запустить: python client_live_windows.py
   
   Способ 2: Через групповую политику (для всех 50)
   ├─ Создать установочный пакет (.msi или .exe)
   ├─ Развернуть через Active Directory
   └─ Автоматическая установка и автозапуск
   
   Способ 3: Через Ansible/PowerShell (автоматизация)
   ├─ Подготовить скрипт развертывания
   ├─ Запустить на всех машинах одной командой
   └─ Настроить автозапуск

📁 СТРУКТУРА НА СЕРВЕРЕ
-----------------------

После запуска всех машин на сервере будет:

temp_recordings/
├── Иван_Desktop/
│   ├── 20251029_143000.mp4
│   ├── 20251029_144000.mp4
│   └── ...
├── Мария_Laptop/
│   ├── 20251029_143000.mp4
│   └── ...
├── Петр_Office/
│   └── ...
└── ... (еще 47 папок)

Веб-интерфейс на http://195.133.17.131:6789 покажет:
┌────────────────────────────────┐
│ 📹 Screen Monitor              │
│                                │
│ 🖥️ Машины (50):               │
│                                │
│ ┌──────────────────────────┐  │
│ │ 🖥️ Иван_Desktop          │  │
│ │ 📁 Файлов: 5 | 💾 250 MB │  │
│ │ [🔴 LIVE] [📼 Записи]    │  │
│ └──────────────────────────┘  │
│                                │
│ ┌──────────────────────────┐  │
│ │ 🖥️ Мария_Laptop          │  │
│ │ 📁 Файлов: 3 | 💾 150 MB │  │
│ │ [🔴 LIVE] [📼 Зариси]    │  │
│ └──────────────────────────┘  │
│                                │
│ ... (еще 48 машин)             │
└────────────────────────────────┘

⚙️ КОНФИГУРАЦИЯ КЛИЕНТА
------------------------

Файл: client_config.txt (на каждой Windows машине)

MACHINE_ID=Иван_Desktop
SERVER_HOST=195.133.17.131
SERVER_PORT=6789
SIMULATE_SCREEN=false
RECORDING_INTERVAL=300
FPS=10

📦 ЗАВИСИМОСТИ ДЛЯ WINDOWS
--------------------------

requirements_windows.txt:
  opencv-python==4.8.1.78
  flask==3.0.0
  requests==2.31.0
  pillow==10.1.0
  numpy==1.24.3
  mss==9.0.1          # <-- НОВОЕ для Windows (захват экрана)

🚀 ПЛАН ДЕЙСТВИЙ
---------------

ШАГ 1: Адаптировать клиент для Windows
  ├─ Создать client_live_windows.py с mss
  ├─ Тестировать на одной Windows машине
  └─ Убедиться, что данные попадают на сервер в правильную папку

ШАГ 2: Подготовить пакет развертывания
  ├─ Создать установочный скрипт (install.bat)
  ├─ Создать конфигурационный шаблон (config.example.txt)
  └─ Создать README для администраторов Windows

ШАГ 3: Развернуть на одной тестовой машине
  ├─ Скопировать файлы
  ├─ Установить зависимости
  ├─ Настроить MACHINE_ID
  └─ Запустить и проверить

ШАГ 4: Масштабирование до 50 машин
  ├─ Подготовить список всех machine_id
  ├─ Создать скрипт для массового развертывания
  └─ Развернуть на всех 50 машинах

ШАГ 5: Мониторинг на сервере
  ├─ Открыть http://195.133.17.131:6789
  ├─ Убедиться, что видно все 50 машин
  ├─ Проверить live стримы каждой машины
  └─ Проверить сохранение видео

🔍 ПРОВЕРКА РАБОТОСПОСОБНОСТИ
-----------------------------

После развертывания проверьте:

1. На сервере (195.133.17.131:6789):
   ✅ Видно все 50 машин в списке
   ✅ У каждой есть кнопка "🔴 LIVE"
   ✅ Live стрим показывает экран машины
   ✅ Видео сохраняются в папках temp_recordings/{machine_id}/

2. На каждой Windows машине:
   ✅ Процесс client_live_windows.py запущен
   ✅ Отправляет кадры на сервер каждые 2 секунды
   ✅ Записывает видео локально каждые 5 минут
   ✅ Логи показывают успешные отправки

3. Структура папок на сервере:
   ✅ 50 папок в temp_recordings/
   ✅ В каждой папке есть .mp4 файлы
   ✅ Файлы появляются регулярно

📝 НАЗВАНИЯ МАШИН (50 ШТУК)
----------------------------

Рекомендуемый формат: Имя_ТипУстройства

Примеры:
  - Иван_Desktop
  - Мария_Laptop
  - Петр_OfficePC
  - Сергей_Home
  - Анна_Workstation
  ...

⚠️ ВАЖНЫЕ МОМЕНТЫ
-----------------

1. Уникальность machine_id:
   - Каждая машина должна иметь УНИКАЛЬНЫЙ machine_id
   - Не используйте одинаковые имена!
   - Лучше: ИмяПользователя_НазваниеПК

2. Сеть:
   - Все 50 машин должны иметь доступ к серверу
   - Порт 6789 должен быть открыт на сервере
   - Проверьте firewall на каждой Windows машине

3. Производительность:
   - 50 машин = много одновременных подключений
   - Убедитесь, что сервер выдерживает нагрузку
   - Мониторьте использование CPU/RAM на сервере

4. Хранилище:
   - 50 машин × 5 минут записи = много видео
   - Настройте автоматическую очистку старых записей
   - Рассчитайте необходимое место на диске

5. Безопасность:
   - Используйте VPN или безопасное соединение
   - Не передавайте пароли в открытом виде
   - Ограничьте доступ к веб-интерфейсу сервера

💡 ДОПОЛНИТЕЛЬНЫЕ УЛУЧШЕНИЯ
---------------------------

1. Автозапуск клиента:
   - Создать Windows Service
   - Или добавить в автозагрузку
   - Запуск при включении компьютера

2. Мониторинг состояния:
   - Клиент отправляет heartbeat на сервер
   - Сервер показывает "онлайн/оффлайн" для каждой машины

3. Уведомления:
   - Email/SMS при недоступности машины
   - Логирование всех событий

4. Веб-дашборд расширенный:
   - Графики активности
   - Статистика по времени записи
   - Поиск и фильтрация

🔗 СВЯЗАННЫЕ ФАЙЛЫ
-----------------

Код:
  - server_simple.py          - сервер (УЖЕ ГОТОВ)
  - client_live.py            - клиент (нужно адаптировать для Windows)
  - requirements.txt          - зависимости (добавить mss)

Документация:
  - START_AND_FINISH.txt      - как запускать/останавливать
  - КАК_РАБОТАЕТ.txt          - как работает система
  - ИНСТРУКЦИЯ_УДАЛЕННЫЙ_СЕРВЕР.md - настройка сервера

