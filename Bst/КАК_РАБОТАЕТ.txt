╔════════════════════════════════════════════════════════════╗
║         📖 КАК РАБОТАЕТ ПРОГРАММА                          ║
╚════════════════════════════════════════════════════════════╝

🎯 НАЗНАЧЕНИЕ
════════════════════════════════════════════════════════════

Система мониторинга экранов позволяет:
- Видеть экраны нескольких компьютеров одновременно
- Просматривать LIVE трансляции в реальном времени
- Хранить записи экрана каждой машины отдельно
- Управлять всеми машинами через веб-интерфейс

════════════════════════════════════════════════════════════

🏗️ АРХИТЕКТУРА (из чего состоит)
════════════════════════════════════════════════════════════

1. 📡 СЕРВЕР (server_simple.py)
   ───────────────────────────────────────────────────────
   - Работает на удаленном хосте: 195.133.17.131:6789
   - Принимает кадры экрана от клиентов через HTTP POST
   - Хранит последний кадр каждой машины в памяти
   - Отдает кадры через MJPEG поток (M-JPEG streaming)
   - Показывает список всех машин на главной странице
   - Хранит видео записи в папках по машинам

2. 💻 КЛИЕНТЫ (client_live.py)
   ───────────────────────────────────────────────────────
   - Захватывает экран компьютера (скриншот)
   - Кодирует кадр в JPEG
   - Отправляет кадр на сервер каждые 2 кадра (5 раз в секунду при FPS=10)
   - Записывает видео в папку temp_recordings/<machine_id>/
   - Работает постоянно в фоновом режиме

3. 🐳 DOCKER КЛИЕНТЫ (для тестирования)
   ───────────────────────────────────────────────────────
   - Симулированные машины (Иван, Мария и др.)
   - Создают тестовые кадры с названием и временем
   - Позволяют проверить систему без реальных машин

════════════════════════════════════════════════════════════

🔄 КАК ЭТО РАБОТАЕТ (пошагово)
════════════════════════════════════════════════════════════

ШАГ 1: ЗАПУСК СЕРВЕРА
─────────────────────────────────────────────────────────────
1. Сервер запускается на удаленном хосте (195.133.17.131)
2. Слушает порт 6789
3. Ждет подключений от клиентов
4. Создает папки для каждой машины автоматически

ШАГ 2: ЗАПУСК КЛИЕНТОВ
─────────────────────────────────────────────────────────────
1. Клиент запускается на компьютере (ваш MacBook или Docker)
2. Определяет уникальный ID машины (например: MacBook-Air-3.local_bogdanprihodko)
3. Начинает захватывать экран каждые 0.1 секунды (10 FPS)
4. Кодирует каждый 2-й кадр в JPEG
5. Отправляет кадр на сервер через HTTP POST:
   POST http://195.133.17.131:6789/api/upload_frame?machine_id=ИмяМашины

ШАГ 3: СЕРВЕР ХРАНИТ КАДРЫ
─────────────────────────────────────────────────────────────
1. Сервер получает кадр от клиента
2. Сохраняет его в памяти: machine_id_to_last_frame[machine_id] = кадр
3. Создает папку temp_recordings/<machine_id>/ если её нет
4. Каждая машина имеет свой последний кадр в памяти

ШАГ 4: ПОКАЗ В БРАУЗЕРЕ
─────────────────────────────────────────────────────────────
1. Пользователь открывает http://195.133.17.131:6789
2. Сервер показывает список всех машин (из папок и активных стримов)
3. При клике на "🔴 LIVE" открывается стрим:
   http://195.133.17.131:6789/live/MacBook-Air-3.local_bogdanprihodko

ШАГ 5: MJPEG СТРИМ
─────────────────────────────────────────────────────────────
1. Браузер запрашивает: /stream.mjpg?machine_id=ИмяМашины
2. Сервер получает последний кадр для этой машины из памяти
3. Отправляет кадр в формате MJPEG:
   --frame
   Content-Type: image/jpeg
   [данные JPEG]
   --frame
   Content-Type: image/jpeg
   [следующий кадр]
   ...
4. Браузер постоянно обновляет изображение → получается LIVE стрим

════════════════════════════════════════════════════════════

📊 ДАННЫЕ И ФАЙЛЫ
════════════════════════════════════════════════════════════

СТРУКТУРА ПАПОК:
─────────────────────────────────────────────────────────────
temp_recordings/
├── MacBook-Air-3.local_bogdanprihodko/    ← ваша машина
│   ├── video1.mp4
│   ├── video2.mp4
│   └── _h264_cache/                       ← кэш конвертированных видео
├── Иван_Desktop/                          ← Docker клиент
│   └── ...
└── Мария_Laptop/                          ← Docker клиент
    └── ...

В ПАМЯТИ СЕРВЕРА:
─────────────────────────────────────────────────────────────
machine_id_to_last_frame = {
    "MacBook-Air-3.local_bogdanprihodko": <JPEG байты>,
    "Иван_Desktop": <JPEG байты>,
    "Мария_Laptop": <JPEG байты>,
    ...
}

════════════════════════════════════════════════════════════

🔧 ТЕХНИЧЕСКИЕ ДЕТАЛИ
════════════════════════════════════════════════════════════

ФОРМАТ КАДРА:
─────────────────────────────────────────────────────────────
- JPEG с качеством 50% (компромисс между размером и качеством)
- Размер зависит от разрешения экрана
- Обычно 20-200 KB на кадр

ЧАСТОТА ОБНОВЛЕНИЯ:
─────────────────────────────────────────────────────────────
- Клиент отправляет: каждые 2 кадра (при FPS=10 это 5 кадров/сек)
- Стрим отдает: все кадры из памяти (до 10 FPS)
- Задержка: ~0.2-0.5 секунды от реального экрана

ХРАНЕНИЕ ВИДЕО:
─────────────────────────────────────────────────────────────
- Записываются сегментами по 5 минут (300 секунд)
- Формат: MP4
- Кодек: H.264 (если доступен) или mp4v (fallback)

════════════════════════════════════════════════════════════

🌐 СЕТЕВЫЕ ПРОТОКОЛЫ
════════════════════════════════════════════════════════════

HTTP POST (клиент → сервер):
─────────────────────────────────────────────────────────────
POST /api/upload_frame?machine_id=ИмяМашины
Headers:
  Content-Type: application/octet-stream
  X-Machine-Id: ИмяМашины
Body: JPEG байты кадра

HTTP GET (браузер → сервер):
─────────────────────────────────────────────────────────────
GET /                          → главная страница со списком машин
GET /live/<machine_id>         → HTML страница со стримом
GET /stream.mjpg?machine_id=X  → MJPEG поток кадров
GET /list/<machine_id>         → список записанных видео
GET /video/<machine_id>/<file> → воспроизведение видео

════════════════════════════════════════════════════════════

🎬 ПОТОК ДАННЫХ
════════════════════════════════════════════════════════════

1. ЭКРАН КОМПЬЮТЕРА
   ↓
2. PIL ImageGrab (захват экрана)
   ↓
3. OpenCV (обработка, кодирование в JPEG)
   ↓
4. HTTP POST запрос (отправка на сервер)
   ↓
5. СЕРВЕР (сохранение в памяти)
   ↓
6. MJPEG генератор (упаковка кадров)
   ↓
7. HTTP Response (отправка браузеру)
   ↓
8. БРАУЗЕР (отображение стрима)

════════════════════════════════════════════════════════════

💡 ОСОБЕННОСТИ
════════════════════════════════════════════════════════════

✅ Мультипользовательская система:
   - Каждая машина независима
   - Своя папка для видео
   - Своя LIVE трансляция

✅ Работает с реальными и Docker машинами:
   - Реальные: захватывают настоящий экран
   - Docker: симулируют экран для тестирования

✅ Автоматическое управление:
   - Создает папки автоматически
   - Обнаруживает новые машины
   - Показывает только активные стримы

✅ Оптимизация:
   - Отправляет не все кадры (каждый 2-й)
   - JPEG качество 50% для экономии трафика
   - Кэширование конвертированных видео

════════════════════════════════════════════════════════════

🔍 ПРОБЛЕМЫ И РЕШЕНИЯ
════════════════════════════════════════════════════════════

❓ Почему стрим не работает?
   → Проверьте: запущен ли клиент, доступен ли сервер,
     правильно ли указан machine_id

❓ Почему видео не воспроизводится?
   → Видео конвертируются в H.264 автоматически
   → Проверьте наличие ffmpeg на сервере

❓ Почему видны не все машины?
   → Машины появляются после отправки первого кадра
   → Подождите 5-10 секунд после запуска клиента

════════════════════════════════════════════════════════════

